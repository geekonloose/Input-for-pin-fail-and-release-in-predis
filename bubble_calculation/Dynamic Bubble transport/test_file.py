# -*- coding: utf-8 -*-
"""
Created on Tue Oct  3 09:53:14 2017

@author: Parth
"""
import numpy as np

dt = 1e-4
number  = int(1e1)
nu = 1e-2



import math
from matplotlib import pyplot as plt

plenum_pressure = [3e6]

gaas_temp = []
db = []
diff = []
sedimentation = []
inertial_impaction = []
#c = []






no_of_bubble_generated = 5

#no_of_bubble_generated = [[5],[5],[6],[7],[8],[2],[3],[4]]

#y = [[0 for i in range(1)] for j in range(len(db))]
#
#v = [[0.001 for i in range(1)] for j in range(len(db))]
#
#Ma = [[0 for i in range(1)] for j in range(len(db))]
#
#Pb = [[0 for i in range(1)] for j in range(len(db))]
#
#rhog = [[0 for i in range(1)] for j in range(len(db))]


rhol = 1000
P0 = 1e5


number_density_of_isotope = [[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],
 [3.7819887047603763e+24,
  3.6287377022269439e+24,
  75930.148634782818,
  1.6249610568214902e+22,
  2.29e+24,
  1.79e+24,
  681542182.99918759,
  100400696109123.0],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],
  [7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[7.9236878521791037e+21, 0.0, 0.0, 0.0, 2.29e+24, 1.79e+24, 0.0, 0.0],
 [1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133],[1.9531701735651755e+24,
  1.8740252363823912e+24,
  39213.364651989854,
  8.3919486017223923e+21,
  2.29e+24,
  1.79e+24,
  351975633.23901677,
  51850933767791.133]]


number_density_of_isotope[0] = [7.923687852179104e+21,
 7.602609921517937e+21,
 159.08212406723817,
 3.4044745215642784e+19,
 2.29e+24,
 1.79e+24,
 1427906.8336140001,
 210350648353.0311]


H = 5
g = 9.8
kb = 1.38e-23
no_of_bubble_generated = 1
molar_mass_gas = 0.135
Na = 6.022e23
aerosol_size = [1e-8 , 1e-7, 1e-6, 1e-5]
gas_temp = [1000+273]
with open('number_density_in_core.txt') as f:
    #    count = sum(1 for line in f)
    x1 = []
    for line in f:
        one_line1 = [i for i in line.split()]
        x1.append(one_line1)

number_density_in_core = [list(list(zip(*x1))[i]) for i in range(len(x1[0]))]

number_density_in_core = number_density_in_core[0]

number_density_in_core = list(map(float, number_density_in_core))



#Ma = [[[0] for i in range(len(number_density_in_core))] for i in range(1)]

Ma = []
c = []
RF = []
Name = ['cs', 'rb', 'ru', 'sr', 'kr', 'xe', 'u', 'pu']

temp_num = []
molar_mass = np.array([83.8e-3,85.4678e-3,87.62e-3,87.62e-3,91.224e-3,101.07e-3,127.6e-3,126.9045e-3,131.293e-3,132.9055e-3,137.327e-3,138.9055e-3,140.116e-3,238.0289e-3,244e-3])



initial_mass = []

for i in range(len(Name)):

    initial_mass.append(number_density_of_isotope[0][i] * molar_mass[i] / Na)


dp = 1e-8
mug = 25e-6

with open('vapor_pressure.txt') as f:
    #    count = sum(1 for line in f)
    x = []
    for line in f:
        one_line = [i for i in line.split()]
        x.append(one_line)

Name, rho_aero, A, B, C, D = [list(list(zip(*x))[i]) for i in range(len(x[0]))]

A = list(map(float, A))
B = list(map(float, B))
C = list(map(float, C))
D = list(map(float, D))
rho_aero = list(map(float, rho_aero))


#====================================================================================================
#====================================================================================================

#====================================================================================================
#====================================================================================================


for i in range(10):

    time = i * dt
#
#    old_db_length = len(db)





    for i2 in range(no_of_bubble_generated):
        db.append([0.016946])
        Ma.append([[i] for i in initial_mass])
        RF.append([[] for i in initial_mass])
        diff.append([[0 for i11 in range(i)] for i12 in range(len(Name))])
        sedimentation.append([[0 for i11 in range(i)] for i12 in range(len(Name))])    #change here
        inertial_impaction.append([[0 for i11 in range(i)] for i12 in range(len(Name))])
        c.append([[0 for i11 in range(i)] for i12 in range(len(Name))])
#        c.append([])








#    for j8 in range(len(Ma)):
#        for i8 in range(len(Name)):
#            Ma[j8].append([0])
#
#    print(Ma)

# fix me : for db[-no_of_bubble_generated]


    for i6 in range(1,no_of_bubble_generated+1):
        for i5 in range(len(db[0])-1):
            db[-i6].insert(0,0)
#            sedimentation[-i6].insert(0,0)


    if i == 0:    # to make sure that variable defined only once

        y = [[0] for j2 in range(len(db))]

        v = [[0.001 for i4 in range(1)] for j2 in range(len(db))]

#        Ma = [[ 0 for i4 in range(number)] for j2 in range(len(db))]

        Pb = [[1e5 for i4 in range(1)] for j2 in range(len(db))]

        rhog = [[0 for i4 in range(1)] for j2 in range(len(db))]


    while len(db) != len(y):
        y.append([0 for i in range(len(y[0]))])
        v.append([0.001 for i in range(len(y[0]))])
        Pb.append([1e5 for i in range(len(y[0]))])
        rhog.append([0 for i in range(len(y[0]))])


    gas_temp.append(gas_temp[0] * math.exp(-2*nu*time))

    molar_mass = np.array([83.8e-3,85.4678e-3,87.62e-3,87.62e-3,91.224e-3,101.07e-3,127.6e-3,126.9045e-3,131.293e-3,132.9055e-3,137.327e-3,138.9055e-3,140.116e-3,238.0289e-3,244e-3])

#====================================================================================================
#====================================================================================================
                            # FOR ALL BUBBLES
#===================================================================================================
#====================================================================================================


    for i3 in range(len(db)):    #for each bubble diameter

        Pb[i3].append( P0 + rhol * g * ( H - y[i3][i]) )



        if i > 0 :

            db[i3].append( ( 6 * sum( number_density_of_isotope[i] ) * kb * time / ( 3.14 * Pb[i3][i] ) )**( 1 / 3.0 )) # diameter equation

        rhog[i3].append(sum(number_density_of_isotope[i]) * molar_mass_gas / Na)

        v[i3].append( v[i3][i] + dt * ( 6 / ( rhol * 3.14 * db[i3][i]**3 ) ) * ( ( 3.14 * db[i3][i]**3 * g * ( rhol - rhog[i3][i] ) ) / 6 - 12 * 3.14 * db[i3][i] * v[i3][i] ) ) #velocity of bubble

        y[i3].append(i * dt * v[i3][i])




#====================================================================================================
#====================================================================================================
                    #        AEROSOL DEPOSITION MODULE
#====================================================================================================
#====================================================================================================

### Initialisation of the aerosol mass


        for i9 in range(len(Name)):




            lembd = kb * gas_temp[i] / ( float(math.sqrt(2) ) * math.pi * Pb[i3][i] * db[i3][i]**2 )    #mean free path of a gas molecule

            cunn = 1 + ( 2 * lembd / dp ) * ( 1.257 + 0.4 * math.exp( - 0.55 * dp / lembd ) ) #cunningham slip correction

            theta = kb * gas_temp[i] * cunn / ( 3 * 3.14 * mug * dp )

            tau = rho_aero[i9] * dp**2 * cunn / ( 18 * mug )

            diff[i3][i9].append( 1.8 * ( 8 * theta / ( v[i3][i] * db[i3][i]**3 ) )**( 1 / 2.0 ) )    #diffusion coefficient

            sedimentation[i3][i9].append( 1.5 * g * tau / ( db[i3][i] * v[i3][i] ) )    #sedimentation coefficient

            inertial_impaction[i3][i9].append( 18 * v[i3][i] * tau / db[i3][i]**2 )    # inertial impaction coefficient


            c[i3][i9].append( diff[i3][i9][i] + sedimentation[i3][i9][i] + inertial_impaction[i3][i9][i] )


            Ma[i3][i9].append( Ma[i3][i9][0] * math.exp( - y[i3][i] * c[i3][i9][i] ))    #calculates aerosol masss

            RF[i3][i9].append( math.exp( - y[i3][i] * c[i3][i9][i] ) )


#
#            dy = dt*v[i]
#
#            Ma[i+1] = Ma[i] + dy*(-c*Ma[i])
#
#            RF[i] = math.exp(-y[i]*c)
#
#
#            if y[i]>H:
#                print('bubble reached the pool surface')
#                break
#            elif N[i]<0:
#                print('bubble gas decayed out')
#                break








































#### Bubble details
#
#no_of_channel = 438
#g = 9.8  # gravitational acceleration
#H = 5  # height of the pool
#kb = 1.3807E-23  # boltzman constant in J/k
#Na = 6.022E23  # avogrado number
#lembda = 0  # decay constant
#c = 0  # total rate( diffusion, sedimentation, inertial impaction)
#cp = 1.2844  # J/kg
#volume_of_plenum = 0.710 * math.pi * 0.25 * (6.6e-3)**2 #m
#
#gas_density = 5.761e3 # kg/m3 density of xenon
#bubble_dia = 0.016946
#vol_bubble = 0.1667 * math.pi * bubble_dia**3
#bubble_mass = gas_density * vol_bubble # gas density * volume of bubble
#kb = 1.3807E-23  # boltzman constant in J/k
#plenum_pressure = 3e6
#gas_temp = 800+273
#flow_rate = 0.000158
#db = []
#
#
#time = 10
#factor = (gas_density*no_of_channel* volume_of_plenum)
#num_den_in_one_bubble = plenum_pressure * vol_bubble/ kb*gas_temp
#
#mass_released_at_time = factor * flow_rate * time
#
##        num_density_released_at_time = 1
#
#no_of_bubble_at_instance = mass_released_at_time  / bubble_mass
#
#for i in range(int(no_of_bubble_at_instance)):
#    db.append([1.69])
