import numpy as np
import math
from matplotlib import pyplot as plt

number = int(1e6)
dt = 1E-4
samplerate = 1000





#%% Initialisations

T = np.zeros(number)
# T_plenum = np.zeros(number)
Db = np.zeros(number)
v = np.zeros(number)  # bubble rising velocity m/s
t = np.zeros(number)
y = np.zeros(number)
rhol = np.zeros(number)
rhog = np.zeros(number)
Pb = np.zeros(number)
N = np.zeros(number)  # chack
Ma = np.zeros(number)
RF = np.zeros(number)
Vb = np.zeros(number)
diff = np.zeros(number)
sedimentation = np.zeros(number)
inertial_impaction = np.zeros(number)
N_aero = np.zeros(number)





# %%Aerosol size

# aerosol_size = np.linspace(0.01E-6,5e-6,int(30))
# aerosol_size = [10E-6]
aerosol_size = [1e-8, 1e-7, 1e-6, 3e-6]
DF = np.zeros([len(aerosol_size), number])





#%% Constants

Tb = 1154.1  # Boiling point of sodium in kelvine
Ts = 800 + 273  # sodium pool temperature
cp = 1.2844  # J/kg
plenum_pressure = 5e6  # pressure of plenum 50 bar
g = 9.8  # gravitational acceleration
P0 = 1e5  # 13# Atmosperic pressure 1 bar = 1E5 pascals
H = 5  # height of the pool
h = 5  # check (heat transfer rate)
kb = 1.3807E-23  # boltzman constant in J/k
Na = 6.022E23  # avogrado number
lembda = 0  # decay constant
molar_mass_gas = 135e-3  # kr#135E-3 #(xe-135)
molar_mass_aerosol = 239E-3  # (fuel U-235)
c = 0  # total rate( diffusion, sedimentation, inertial impaction)
partial_pressure = 0
volume_of_plenum = 100e-6 #m
volume_of_big_bubble = 0





#%% Initial Values

T[:] = 800 + 273  # check
T_plenum = 1000 + 273
rhol[:] = 759.7575  # 949-0.223*(T[0]-273.15)-1.7E-5*(T[0]-273.15)**2 #density of sodium
Pb[0] = P0 + rhol[0] * g * (H)  # pressure of bubble
v[0] = 1e-3  # check value #velocity of bubble
# N[0] = 2.1136E27 #number density inside bubble (total = gas + aerosols)
Db[0] = 2e-2  # bubble diameter assumed
# rho_aero[0] = rhop #aerosol density
Vb[0] = math.pi * 0.1667 * Db[0] ** 3  # bubble volume





#%% Print Statements:

print('pressure is:', Pb[0], 'Pa')
print('sodium density: {:0.3e}'.format(rhol[0]), 'kg/m3')
print('bubble diameter: {:0.3e}'.format(Db[0] * 1E2), 'cm')





#%% core number density data :--->>> Read

with open('number_density_in_core.txt') as f:
    #    count = sum(1 for line in f)
    x1 = []
    for line in f:
        one_line1 = [i for i in line.split()]
        x1.append(one_line1)

number_density_in_core = [list(list(zip(*x1))[i]) for i in range(len(x1[0]))]

number_density_in_core = number_density_in_core[0]

number_density_in_core = list(map(float, number_density_in_core))





#%% Vapor pressure data :---->>> Read

with open('vapor_pressure.txt') as f:
    #    count = sum(1 for line in f)
    x = []
    for line in f:
        one_line = [i for i in line.split()]
        x.append(one_line)

Name, rho_aero, A, B, C, D = [list(list(zip(*x))[i]) for i in range(len(x[0]))]

A = list(map(float, A))
B = list(map(float, B))
C = list(map(float, C))
D = list(map(float, D))
rho_aero = list(map(float, rho_aero))

partial_pressure = np.zeros(len(Name))

for i in range(len(Name)):
    
    if Name[i] != 'i':
        partial_pressure[i] =1e5* (10 ** ((A[i]) + B[i] / T_plenum + C[i] * math.log10(T_plenum) + D[i] * T_plenum * 1e-3))
    else:
        partial_pressure[i] = 1e5*(10**(A[i]-B[i]/(T_plenum + C[i])))







#%% Initialization based on Size of file

rho_aero = np.array(rho_aero)
number_density_of_isotope = np.zeros(len(Name))
number_density_of_isotope_after_cooling = np.zeros(len(Name))





#%% Partial pressure data ----->> WRITE

partial_pressure =  np.asarray(partial_pressure)

file = open('partial_pressure.txt','w')
for i in range(len(Name)):
    file.write('{:0.3e}\n'.format(partial_pressure[i]))
file.close()

pressure_of_non_condensable = Pb[0]





#%% Number Density in Plenum

condition_volatile = []
condition_num_partial = []

for i in range(len(partial_pressure)):
    
    if partial_pressure[i] > plenum_pressure:
        condition_volatile.append(i)
        
        number_density_of_isotope[i] = number_density_in_core[i]
        
    else:
        
        condition_num_partial.append(i)
        
        number_density_of_isotope[i] = partial_pressure[i] * volume_of_plenum/(kb * T_plenum)

constant = sum(number_density_of_isotope)*kb*T_plenum
print('sanity {}'.format(plenum_pressure*volume_of_plenum))
print('c',(constant))



#%% Property of bubble

volume_of_big_bubble = constant / Pb[0]
diameter_of_big_bubble = (volume_of_big_bubble/(0.1667*math.pi))

no_of_bubble = 50000

Vb[0] = volume_of_big_bubble/no_of_bubble

number_density_of_isotope = (number_density_of_isotope) / no_of_bubble

Db[0] = (sum(number_density_of_isotope) * kb * T[0] / (Pb[0] * math.pi * 0.1667))**(1.0/3.0)


#%% Partial Pressure in the sodium i.e at sodium sub-cooled temperature

for i in range(len(Name)):
    
    if Name[i] != 'i':
    
        partial_pressure[i] =1e5* (10 ** ((A[i]) + B[i] / T[0] + C[i] * math.log10(T[0]) + D[i] * T_plenum * 1e-3))
        
    else:
        
        partial_pressure[i] = 1e5*(10**(A[i]-B[i]/(T[0] + C[i])))



for i in range(len(partial_pressure)):
    
    if i not in condition_volatile:
        
        number_density_of_isotope_after_cooling[i] = partial_pressure[i] * volume_of_plenum/(kb * T_plenum * no_of_bubble)
    
    else:
        
        number_density_of_isotope_after_cooling[i] = number_density_of_isotope[i]

number_density_of_isotope_after_cooling = np.array(number_density_of_isotope_after_cooling)



N_aero = number_density_of_isotope - number_density_of_isotope_after_cooling

print('number_dens_of_isotope', number_density_of_isotope,'\n\n\n\n\n\n')
print('number_dens_of_isotope_after_cooling',number_density_of_isotope_after_cooling,'\n\n\n')

#%% TXT write for after before and no of aaerosols

file = open('nu_to_serosol.txt','w')
file.write('Core inv \t N_before cooling \t N_after cooling \n')
for i in range(len(Name)):
    file.write('{:0.3e}\t{:0.3e}\t{:0.3e}\n'.format(number_density_in_core[i],number_density_of_isotope[i],number_density_of_isotope_after_cooling[i]))




print('Number Density to be aerosol {}'.format(N_aero),'\n\n\n\n')

#print('Volume of Small Bubble: {}'.format(Vb[0]))
print('Diameter of Small Bubble: {}'.format(Db[0]))
#print ('volume of big bubble',volume_of_big_bubble)
#print('big bubble diameter is : {}'.format(diameter_of_big_bubble))
file = open('result.txt','w')
file.write('Small Bubble Diameter: {} cm \n'.format(Db[0]))
'''
#%% Mass of aerosol
summation = 0
for i in condition_to_be_aerosol:
    summation = summation + number_density_of_isotope[i]
N_aero[0] = summation
'''
#molar_mass = np.array([132e-3,85e-3,86e-3,88e-3,84e-3,131e-3,235e-3,239e-3])

molar_mass = np.array([83.8e-3,85.4678e-3,87.62e-3,87.62e-3,91.224e-3,101.07e-3,127.6e-3,126.9045e-3,131.293e-3,132.9055e-3,137.327e-3,138.9055e-3,140.116e-3,238.0289e-3,244e-3])

N[:] = sum(number_density_of_isotope_after_cooling)

mug = 25e-6

#%% file write

j = 0

file = open('number_density.txt','w')
file.write('#Bubble Diameter:{}'.format(Db[0])+' m \n')
file.write('#Pressure:{:0.3e}'.format(Pb[0])+' Pa \n')
file.write('#Bubble Volume:{}'.format(Vb[0])+' m3 \n')

for i in number_density_of_isotope:
    file.write('{}:{:0.1e}\n'.format(Name[j],i))
    j = j+1

file.close()

#%%  Program loop



i = 0 #initialize
j = 0 #initialize


#condition_to_be_aerosol = [4]

file  = open('results.txt','w')





for dp in aerosol_size:

    j = 0
    print('aerosol size is:',dp,'m')
    file.write('Size of aerosol is: {} \n'.format(dp))
    
    for k in condition_num_partial:


        print('aerosol density is: {:.3e}'.format(rho_aero[k]))
        Ma[0] = (N_aero[k]*molar_mass[k])/Na
#        Ma[0] = (number_density_of_isotope[k]*molar_mass[k])/Na
#        Ma[0] = (summation*molar_mass[k])/Na
        print('aerosol Mass is: {:.3e}'.format(Ma[0]))
        for i in range(number-3):

            #%% Bubble Module
            t[i] = i*dt

            y[i] = (i)*dt*v[i]

            N[i+1] = N[i] - lembda*dt*N[i]

            if i>0:

                Ma[i] = Ma[0]*math.exp(-y[i]*c)

    #        rhol[i] = 949-0.223*(T[i]-273.15)-1.7E-5*(T[i]-273.15)**2 #density of sodium

            Pb[i] = P0 + rhol[i]*g*(H-y[i]) # pressure equation

            if i > 0 :

                Db[i] = (6*N[i]*kb*T[i]/(3.14*Pb[i]))**(1/3.0) # diameter equation
#                N_aero[i+1] = N_aero[i] + ((Ma[i]-Ma[i-1])*Na / molar_mass[k]) *  dt

            Vb[i] = math.pi*0.1667*Db[i]**3

            rhog[i] =  (N[i]*molar_mass_gas/Na)

    #        T[i+1] = T[i] + dt* (0-h*3.14*Db[i]**2 * (T[i]-Ts))/(rhog[i]*Vb[i]*cp) # temperature equation


            v[i+1] = v[i]+ dt*(6/(rhol[i]*3.14*Db[i]**3))*(  (3.14*Db[i]**3 *g*(rhol[i]-rhog[i]))/6 - 12*3.14*Db[i]*v[i]) #velocity of bubble

            #%% Aerosol Module

            lembd = kb*T[i]/(float(math.sqrt(2))*math.pi*Pb[i]*Db[i]**2) #mean free path of a gas molecule

            cunn = 1 + (2*lembd/dp) * (1.257 + 0.4 * math.exp(-0.55*dp/lembd)) #cunningham slip correction

            theta = kb*T[i]*cunn/(3*3.14*mug*dp)

            tau = rho_aero[k]*dp**2 *cunn /(18*mug)

            diff[i] = 1.8*(8*theta/(v[i]*Db[i]**3))**(1/2.0) #diffusion coefficient

            sedimentation[i] = 1.5*g*tau/(Db[i]*v[i]) #sedimentation coefficient

            inertial_impaction[i] = 18*v[i]*tau/Db[i]**2 # inertial impaction coefficient

            #%% calcluating total removal rates

            c = diff[i] + sedimentation[i] + inertial_impaction[i]

            dy = dt*v[i]

            Ma[i+1] = Ma[i] + dy*(-c*Ma[i])

            RF[i] = math.exp(-y[i]*c)


            if y[i]>H:
                print('bubble reached the pool surface')
                break
            elif N[i]<0:
                print('bubble gas decayed out')
                break

#        DF[j,0:i] = RF[0:i]
        print('density of aerosol: {}'.format(rho_aero[k]))
        print('fraction in bubble for {} is {}'.format(Name[k],RF[i-1]))


        file.write('{}\t{} \n'.format(Name[k],RF[i-1]))

        j = j+1
file.close()

#%% Plots starts here


#%%Bubble Plots

#%% Diameter
plt.figure()
plt.plot(t[0:i],Db[0:i],label='diameter',color='blue')
plt.xlabel('time(seconds)',color='blue',size=14)
plt.ylabel('diameter (meter)',color='blue',size=14)
plt.legend()
plt.savefig('diameter')

#%% Temperature
plt.figure()
plt.plot(t[:i],T[:i],label = 'Temperature',color='blue')
plt.xlabel('time',color='blue',size=14)
plt.ylabel('Temp (K)',color='blue',size=14)
plt.legend()
plt.savefig('temperature')

#%% Pressure
plt.figure()
plt.plot(t[:i],Pb[:i],label='pressure',color='blue')
plt.xlabel('time(seconds)',color='blue',size=14)
plt.ylabel('Pressure (Pa)',color='blue',size=14)
plt.legend()
plt.savefig('pressure')

#%% Velocity
plt.figure()
plt.plot(t[:i],v[:i],label='velocity',color='blue')
plt.xlabel('time(second)',color='blue',size=14)
plt.ylabel('velocity(m/s)',color='blue',size=14)
plt.legend()
plt.savefig('velocity')

#%% Release Fractions
plt.figure()
for j in range(len(aerosol_size)):
    plt.plot(t[0:i-1:samplerate],DF[j,0:i-1:samplerate],label='{:0.1e}'.format(aerosol_size[j]))
plt.legend()
plt.xlabel('time(second)',color='blue',size=14)
plt.ylabel('fraction in bubble',color='blue',size=14)
plt.savefig('fraction of mass in bubble')




















'''
plt.figure()
plt.plot(aerosol_size,1/DF[:,i-1])
plt.semilogx()
plt.xlabel('aerosol size(micro meter)')
plt.ylabel('DF')
plt.savefig('DF factor')
'''
'''
plt.figure()
plt.plot(aerosol_size,DF[:,i-1])
plt.semilogx()
plt.semilogy()

plt.plot(aerosol_size*1e6,DF[:j])
plt.semilogx()
plt.semilogy()
'''


#plt.figure()
'''
plt.plot([i for i in range(0,j)],(DF[0:j]),label='release fraction')

plt.xlabel('Time',color='blue',size=14)
plt.ylabel('fraction in bubble',color='blue',size=14)
plt.legend()
plt.savefig('Release')
'''


'''
plt.figure()
plt.plot(t[:i],N[:i],label='number density',color='blue')
plt.xlabel('time(second)',color='blue',size=14)
plt.ylabel('number density',color='blue',size=14)

plt.legend()
plt.savefig('number density')
'''
'''
#convert meter to cm
Db =(Db*1.2E2)
y = y*1.2E2-250
#convert array to list
Db = list(Db)
y = list(y)
import turtle

def draw_circle(turtle, color, size, x, y):
    turtle.penup()
    turtle.color(color)

    turtle.goto(x,y)
    turtle.pendown()

    turtle.circle(size)


turtle.shape("circle")
#turtle.resizemode("user")
turtle.shapesize(1E-2,1E-2)
#tommy.speed(7)
scale = 5000
# Draw three circles:
for i in range(int(len(y)/scale)):
    draw_circle(turtle, "green", Db[scale*i], 25, y[scale*i])
'''




